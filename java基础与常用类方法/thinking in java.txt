组合与继承
1.组合

2.继承
子类自动获得父类所有属性与接口（除private外）
new 子类对象时，子类对象包含了一个父类的子对象

3.组合与继承都是为了类复用，有从属关系用继承，没有从属关系则用组合
总结：继承要慎用，一般用组合就可以解决，判断是否要继承一个基类，根据是否需要向上转型来判断，如果需要向上转型则必需继承，
反之用组合


访问权限关键字
private、protected、public、default都可以修饰类，方法，属性，类一般用public
1.private 属性与方法，只能在本类中使用，new该类对象也不能访问

2.protected 属性与方法，子类与同包类对象可以访问

3.default 同包类对象可以访问

4.public 所有都可以访问
总结：类属性一般用private,类方法一般用public,protected(要么继承，要么同包)、



多态：
父类引用可以指向不同子类对象，可以调用父类与子类都存在的方法

向上转型	--前提要有继承关系，接口也可以看作一个特殊抽象类，实现接口看作继承该接口
缺点：只能调用子类与基类中都存在的方法，子类存在的方法，而基类中不存在的方法，不能调用，子类范围变窄

属性不是动态绑定，即不是多态
方法是动态绑定的（多态）：编写代码时，编译器也不知道具体类型，要等程序运行时才知道具体类型，能够向上转型是因为动态绑定

向上转型应用：（应用在继承与接口）
Circle,Trangle都继承Shape
1.
public void play(Shape s){
	s.draw();   //这里执行具体子类对象的draw()方法，即子类要用这个方法（重写该方法）
}

2.public void play(ShapeInterface s){	//s为接口的实现类
	s.draw();		
}

3.Shape s = new Circle();
4.ShapeInterface s = new Circle();


接口与抽象类，接口是一种更抽象的类，接口与抽象类都不能实例化
1.接口是常量与抽象方法的集合
2.抽象类可以有变量与实体方法
3.抽象类可以实体接口，而且不用实现全部方法，非抽象类必须要实现全部接口


字符串特点：
1.字符串对象内容不可变
2.字符串用=赋值有缓冲池的存在


并发
1.多个线程对同一个对象有写的操作会有线程安全问题（同一对象、写操作）

2.一个用户请求一个controller接口（不管是同一个接口还是不同接口）相当于一个主线程，主线程还可以分子线程.

3.spring的bean是单例模式，如果bean有全局变量并且有写的操作就会有线程安全问题，所以bean一般不设置全局变量，可以设置常量，局部变量
不会有线程安全问题，因为局部变量有多个副本





